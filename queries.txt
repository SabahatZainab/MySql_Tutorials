--------------Create Database-----------------
CREATE DATABASE db_name;
--------------Use Database--------------------
USE db_name;
--------------Create Table--------------------
CREATE TABLE product(
	pid INT,
	pname VARCHAR(50),
	pcompany VARCHAR(50),
	price INT
);
-------------Insert Data ----------------------
INSERT INTO `personal`(id, NAME, birth_date, phone, gender)
VALUES (1, "Ram Kumar", "1990-07-15", "9999999999", "M");

------------Insert Multiple Record--------------------
INSERT INTO personal(id, NAME, birth_date, phone, gender)
VALUES
(3, "Anil Kapoor", "1991-10-05", "6789876543", "M"),
(4, "Juhi Chawla", "1992-03-25", "5678909876", "F"),
(5, "John Abraham", "1992-02-07", "1234567876", "M");	

--------------------------------Constraints-----------------------------
Constraints use when we provide restrictions in columns
CREATE TABLE personal(
	id INT NOT NULL UNIQUE,
	NAME VARCHAR(50) NOT NULL,
	age INT NOT NULL CHECK(age >= 18),
	gender VARCHAR(1) NOT NULL,
	phone VARCHAR(10) NOT NULL UNIQUE,
	city VARCHAR(15) NOT NULL DEFAULT 'Agra'
	
	
);
--------------------------Select Command-------------------------------------
SELECT * FROM table_name
SELECT NAME,gender FROM table_name ->for selected columns

----------------------Use of alias in select command--------------------------
SELECT id AS Id, NAME AS Student, phone AS Phone FROM table_name

if alias name as space like "Student Name" 
SELECT id AS Id, NAME AS "Student Name", age AS Age FROM personal

-----------------------Select Data with where clause-------------------------
SELECT * FROM personal
WHERE gender = "F";

SELECT * FROM personal
WHERE age = 15;

SELECT * FROM personal
WHERE city != "Agra";


<> ->this also work for notequal to operator
SELECT NAME AS "Student Name", id AS "Roll Number" FROM personal
WHERE city <> "Agra";

---------------------select data with AND & OR operator----------------------
SELECT * FROM personal
WHERE age>= 18 AND age<=21

SELECT * FROM personal 
WHERE age<=20 AND gender="M"

SELECT * FROM personal 
WHERE age <= 20 OR gender="M" OR city="Agra"

SELECT * FROM personal 
WHERE (city = "Agra" OR city = "Bhopal") AND gender = "M"

-----------------------use of Not operater-----------------------------

shows records of students whose are not from agra also city= bhopal
SELECT * FROM personal 
WHERE NOT city = "Agra" OR city = "Bhopal"

shows resuls of students whose age less than 20
SELECT * FROM personal 
WHERE NOT age>=20

--------------------Select Data with IN operator------------------------
SELECT * FROM personal 
WHERE age IN(18,22)

---------------------select data with NOT IN operator---------------------
SELECT * FROM personal 
WHERE age NOT IN(18,22) ->shows age which havn't 18 and 22.

SELECT * FROM personal 
WHERE city NOT IN("Agra") ->get record which is not from Agra


---------------------Select Operator with Between Operator----------------
SELECT * FROM personal 
WHERE age BETWEEN 18 AND 21

fetch record where age >= 18 and age<=21

SELECT * FROM personal 
WHERE age NOT BETWEEN 18 AND 21

SELECT * FROM personal 
WHERE id  BETWEEN 2 AND 4

this operator also work on strings columns
SELECT * FROM personal 
WHERE NAME BETWEEN "a" AND "K"; 
SELECT * FROM persons
WHERE birth_date BETWEEN "1995-01-01" AND "1995-06-30";

------------------------Like Operator With Select---------------
SELECT * FROM personal
WHERE NAME LIKE "J%"

SELECT * FROM personal
WHERE NAME LIKE "r%" OR NAME LIKE "s%";

SELECT * FROM personal
WHERE NAME NOT LIKE "j%"

----------------------Use binary------------------
SELECT * FROM personal
WHERE BINARY NAME LIKE "%a"

SELECT * FROM personal
WHERE  phone LIKE "%99"

SELECT * FROM personal
WHERE  phone NOT LIKE "%99"

SELECT * FROM personal
WHERE  NAME  LIKE "r_m%"

-----------------------Regular Expression----------------
SELECT * FROM personal
WHERE NAME REGEXP 'ra';

SELECT * FROM personal
WHERE NAME REGEXP '^ra';
fetch record which start from 'ra'

SELECT * FROM personal
WHERE NAME REGEXP 'r$';
fetch record which end with 'r'

SELECT * FROM personal
WHERE NAME REGEXP 'ram|kapoor|khan'
fetch record which have ram or kapoor or khan in any position

SELECT * FROM personal
WHERE NAME REGEXP '^ram|poor|khan$'

SELECT * FROM personal
WHERE NAME REGEXP '[si]';

SELECT * FROM personal
WHERE NAME REGEXP '[rmh]a';

SELECT * FROM personal
WHERE NAME REGEXP '^[rs]'; ->Search records which start from r or s

SELECT * FROM personal
WHERE NAME REGEXP '[rs]$';->search records which end with r or s.

SELECT * FROM personal
WHERE NAME REGEXP 'r[am]'; ->search combination of ra or rm

SELECT * FROM personal
WHERE NAME REGEXP '[a-j]r';

---------------------Select Statement With OrderBy-----------------------
SELECT * FROM personal
ORDER BY NAME;

SELECT * FROM personal
ORDER BY NAME DESC;

SELECT * FROM personal
ORDER BY NAME ASC; ->no need to specify Ascending Order

SELECT * FROM personal
WHERE city = "Agra"
ORDER BY NAME;

SELECT * FROM personal
ORDER BY NAME, city;

------------------------Select Statement with Distinct -------------------------
SELECT DISTINCT city FROM personal;

SELECT DISTINCT age FROM personal
ORDER BY age;

--------------------------Select with IS NULL ---------------------------------
SELECT * FROM personal
WHERE age IS NULL;

--------------------------Select with IS NOT NULL ------------------------------
SELECT * FROM personal
WHERE age IS NOT NULL;

------------------------Select Data with Limit-----------------------------------
SELECT * FROM personal
LIMIT 3; ->showing first three records

-----------------------Select Data with Limit and Offset-------------------------
SELECT * FROM personal
LIMIT 2,4

----------------------Select Data with Agregate function---------------------------
count function
SELECT COUNT(NAME) FROM personal ->display total number of records


SELECT COUNT(*) FROM personal ->display total number of records

SELECT COUNT(DISTINCT city) FROM personal ->total number of distinct cities

SELECT COUNT(DISTINCT city) AS result FROM personal ->give alias to columns

max function
SELECT MAX(DISTINCT age) AS Age FROM personal

SELECT COUNT(*) AS Records_Total, MAX(DISTINCT city) AS City FROM personal

sum function
SELECT SUM(age) AS Total FROM personal

avg function
SELECT AVG(age) AS Average FROM personal

------------------------------------Update Query---------------------------
UPDATE personal 
SET phone = "88888"
WHERE id = 1; -> if we can't mention record which we want to update it update all records

update multiple columns of record
UPDATE personal 
SET birth_date = "2000-12-17", NAME="Sabahat Zainab", gender="F"
WHERE id=1;

update multiple records
UPDATE personal
SET phone="777888"
WHERE id IN (2,3)

----------------------Rollback in MySql----------------------------
if we want to rollback previous
Rollback; ->this command rollback all the previous commands
Commit; -> rollback se pahli wale jitne bhe command hai unko commit kardete hai permanent save kardete hai

------------------Commit & Rollback Works for --------------------------
only this commands
-Insert
-update
-delete


SELECT * FROM personal

COMMIT;

UPDATE personal
SET gender="M"
WHERE id = 1;

ROLLBACK

-------------------------------Delete Command ------------------------------------
DELETE FROM personal WHERE id=1;

if we can't specify where condition it delete whole records of table
Delete from personal;

DELETE FROM personal WHERE gender = 'm';

----------------------------primary key & foreign key Constraints----------------------
CREATE TABLE city(
	cid INT NOT NULL AUTO_INCREMENT,
	cityname VARCHAR(20) NOT NULL,
	PRIMARY KEY(cid)
);

INSERT INTO city(cityname)
VALUES ('Agra'),('Delhi'),('Bhopal'),('Jaipur'),('Noida');

CREATE TABLE personal(
	id INT NOT NULL,
	NAME VARCHAR(50) NOT NULL,
	percentage INT NOT NULL,
	age INT NOT NULL,
	gender VARCHAR(1) NOT NULL,
	city INT NOT NULL,
	PRIMARY KEY (id),
	FOREIGN KEY (city) REFERENCES City (cid)
);

INSERT INTO personal(id, NAME, percentage, age, gender, city)
VALUES (1, "Ram Kumar", 45, 19, "M", 1),
(2, "Sarita Kumari",55, 22, "F",2),
(3,"Salman Khan", 62, 20, "M", 1),
(4, "Juhi Chawla", 47, 18, "F", 3),
(5, "Anil Kapoor", 74, 22, "M", 1),
(6, "John Abraham", 64, 21, "M",2),

--------------------------------Joins-------------------------
1- Inner Joins
2- left Joins
3- right Joins
4- cross Joins

---------------------------------inner joins -----------------=
SELECT * FROM personal INNER JOIN city
ON personal.city = city.`cid`;

use of alias
SELECT * FROM personal p INNER JOIN city c
ON p.city = c.`cid`;

SELECT p.id, p.name, p.`percentage`, p.`age`,p.`gender`,c.`cityname` FROM personal p INNER JOIN city c
ON p.city = c.`cid`; 

SELECT p.id, p.name, p.`percentage`, p.`age`,p.`gender`,c.`cityname` 
FROM personal p INNER JOIN city c
ON p.city = c.`cid`
WHERE c.`cityname` = "Agra";

----------------------------------left joins-------------------------
SELECT * FROM personal p
LEFT JOIN city c
ON p.`city`= c.`cid`
ORDER BY p.id;

SELECT p.id,p.name,p.`percentage`,p.`age`,p.`gender`,c.`cityname` FROM personal p
LEFT JOIN city c
ON p.`city`= c.`cid`
ORDER BY p.id;

SELECT p.id,p.name,p.`percentage`,p.`age`,p.`gender`,c.`cityname` FROM personal p
LEFT JOIN city c
ON p.`city`= c.`cid`
WHERE p.gender="M"
ORDER BY p.id

---------------------------------right joins --------------------------------
SELECT * FROM personal p
RIGHT JOIN city c
ON p.city=c.`cid`

------------------------------cross joins -----------------------------------
SELECT * FROM personal
CROSS JOIN city;

in cross joins we don't need primary and foreign key.

SELECT p.`id`,p.`name` AS NAME,c.`cityname` AS City FROM personal p
CROSS JOIN city c;

SELECT p.`id`,p.`name` AS NAME,c.`cityname` AS City FROM personal p, city c;

above both query provide similar result, provide combination of records.



------------------------------------------------worked on multiple joins-----------------------

CREATE TABLE City(
	cid INT NOT NULL AUTO_INCREMENT,
	cityname VARCHAR(20) NOT NULL,
	PRIMARY KEY(cid)
);

INSERT INTO City(cityname)
VALUES('Agra'),('Delhi'),('Bhopal'),('Jaipur'),('Noida');

CREATE TABLE Courses(
	course_id INT NOT NULL AUTO_INCREMENT,
	course_name VARCHAR(20) NOT NULL,
	PRIMARY KEY(course_id)
);

INSERT INTO courses(course_name)
VALUES('Btech'),('BCA'),('MBA');

CREATE TABLE personal(
	id INT NOT NULL AUTO_INCREMENT,
	NAME VARCHAR(50) NOT NULL,
	percentage INT NOT NULL,
	age INT NOT NULL,
	gender VARCHAR(1) NOT NULL,
	city INT NOT NULL,
	courses INT NOT NULL,
	PRIMARY KEY(id),
	FOREIGN KEY(city) REFERENCES City(cid),
	FOREIGN KEY(courses) REFERENCES Courses(course_id)
);

INSERT INTO personal(NAME, percentage, age, gender, city, courses)
VALUES('Ram Kumar',45,19,'M',1,1),
('Sarita Kumari', 55, 22 , 'F', 2, 2),
('Salman Khan', 62, 20, 'M', 1, 1),
('Juhi Chawla', 47, 18, 'F', 3,1),
('Anil Kapoor',74,22, 'M', 1,3),
('John Abraham', 64, 21, 'M', 2, 2),
('Shahid Kapoor', 52, 20, 'M', 1,3);


----------------------------multiple join query------------------------
SELECT p.`id`,p.`NAME`,c.`cityname`,cs.`course_name` FROM personal p
INNER JOIN city c
ON p.`city`=c.`cid`
INNER JOIN courses cs
ON p.`courses`=cs.`course_id`

------------------------------multiple join query with where clause---------

SELECT p.`id`,p.`NAME`,c.`cityname`,cs.`course_name` FROM personal p
INNER JOIN city c
ON p.`city`=c.`cid`
INNER JOIN courses cs
ON p.`courses`=cs.`course_id`
WHERE c.`cityname`= 'Agra';

---------------------------select with group by-----------------------------------
SELECT city , COUNT(city) FROM personal
GROUP BY city;

SELECT c.`cityname`,COUNT(p.`city`) AS Total FROM personal p
INNER JOIN city c
ON p.`city`=c.`cid`
WHERE p.age >= 20
GROUP BY city;

SELECT c.`cityname`,COUNT(p.`city`) AS Total FROM personal p
INNER JOIN city c
ON p.`city`=c.`cid`
GROUP BY city
ORDER BY COUNT(p.`city`);


------------------------------select with having clause --------------------------------
SELECT c.`cityname`,COUNT(p.`city`) AS Total FROM personal p
INNER JOIN city c
ON p.`city`=c.`cid`
GROUP BY city
HAVING COUNT(p.city)>3
ORDER BY COUNT(p.`city`);

--------------------------------sub query or nested query---------------------------------
SELECT NAME FROM personal
WHERE courses = (SELECT course_id FROM courses WHERE course_name = "MBA");

for searching multiple students who enrolled in courses
SELECT NAME FROM personal
WHERE courses IN (SELECT course_id FROM courses WHERE course_name IN( "MBA","Btech"));

--------------------------------select with exists-------------------------------------
SELECT NAME FROM personal
WHERE EXISTS(SELECT course_id FROM courses WHERE course_name="MBA"); ->MBA course, availabe hai courses table ma mana subquery return karege record to parent query bhe name return kare ge

if we can search other random record which is not available in courses table

SELECT NAME FROM personal
WHERE EXISTS(SELECT course_id FROM courses WHERE course_name="BA"); ->now return doesn't return anything

--------------------------------------select with not exits --------------------------------------------
agr subquery return nhi karege phr he parent query return karege
SELECT NAME FROM personal
WHERE NOT EXISTS(SELECT course_id FROM courses WHERE course_name="BA");


SELECT NAME FROM personal
WHERE NOT EXISTS(SELECT course_id FROM courses WHERE course_name="MBA"); ->course found then parent query doesn't return anything

-----------------------------------select with union & union all-------------------------------------------
SELECT NAME FROM personal
UNION 
SELECT NAME FROM lectures

SELECT NAME FROM personal
UNION All
SELECT NAME FROM lectures

SELECT id, NAME FROM personal WHERE gender = "M"
UNION ALL
SELECT id , NAME FROM lectures WHERE gender = "F"

---------------------------------------select with union & union all + joins---------------------------------
SELECT p.id, p.name, p.age, c.cityname
FROM personal p
INNER JOIN city c
WHERE c.cityname = "Delhi"
UNION ALL 
SELECT l.id, l.name, l.age, ci.cityname
FROM lectures l
INNER JOIN city ci
WHERE ci.cityname = "Delhi"

------------------------------------select with if/else -----------------------------------------------------
SELECT id, NAME, percentage,
IF(percentage>=33, "Pass", "Fail") AS Result
FROM personal

explanation in if statement three parameter pass first is condition, 2nd parameter is if (if) is true that paticular part executed, else third parameter part executed.

--------------------------------------select with case ---------------------------------------
work like if else
SELECT id, NAME, percentage,
CASE 
	WHEN percentage >= 80 AND percentage <=100 THEN "Merit"
	WHEN percentage >= 60 AND percentage < 80 THEN "1st Division"
	WHEN percentage >= 45 AND percentage < 60 THEN "11st Division"
	WHEN percentage >=33 AND percentage < 45 THEN "111st Division"
	WHEN percentage < 33 THEN "Fail"
	ELSE "Not Correct %"
END AS Grade
FROM personal;

this case also used in update statement
UPDATE personal SET 
percentage = (CASE id
	WHEN 3 THEN 39
	WHEN 7 THEN 62
END)
WHERE id IN (3,7)

this query update percentage of id 3 and 7, 3 to 39 and 7 id to 62

-------------------------------------------Arithmetic Operation in mysql-----------------------------
SELECT id, NAME , (percentage+5) AS "New Percentage" FROM personal

SELECT id, NAME , (percentage * 5) AS "New Percentage" FROM personal

SELECT PI() ->result 3.141593

SELECT ROUND(4.49) ->return 4
SELECT ROUND(4.51) ->return 5

SELECT ROUND(-4.51) ->return -5
SELECT ROUND(-4.49) ->return -4

SELECT ROUND(87897.897) ->return 87897
SELECT ROUND(87897.897,2) ->return 87897.90

SELECT CEIL(1.89) ->return 2
SELECT CEIL(1.2) ->return 2

SELECT FLOOR(1.31) ->return 1
SELECT FLOOR(1.89) ->return 1

SELECT POW(2,3) // 2*2*2=8
SELECT SQRT(16) ->return 4
SELECT ROUND(SQRT(5)) ->return 2


SELECT RAND() ->return random value 0 and 1
SELECT RAND() * 100 -> return random value between 1 and 100

SELECT ROUND(RAND() * 100) -> return round random value between 1 and 100

-------------------------------------------Alter Table -------------------------------------

--reorder column email after name
ALTER TABLE personal 
MODIFY Email VARCHAR(255)
AFTER NAME;

--add email column in personal table
ALTER TABLE personal 
ADD Email VARCHAR(255)

--change datatype of email column
ALTER TABLE personal
MODIFY Email INT(10)

--add Constraints to email column
ALTER TABLE personal 
ADD UNIQUE (Email)

--remane email column to email_id 
ALTER TABLE personal
CHANGE Email Email_id VARCHAR(255);

--drop column from table personal
ALTER TABLE personal
DROP COLUMN Email_id

--rename table name
ALTER TABLE personal 
RENAME students

--agr ap chahte hai primary key ma record kis number se start hn value
ALTER TABLE city
AUTO_INCREMENT = 10;

----------------------------------drop and truncate command ---------------------------
drop column se data ki sath sath table bhe delete hnjata hai truncate se sirf data delete hnte hai columns rahte hai

TRUNCATE TABLE city

DROP TABLE city

---------------------------------------view in mysql -----------------------------------
hum bar bar queries likhe bare bare as ki liya humare pass option hai hum database ma query result save karra le reusability ki liya

CREATE VIEW studentdata
AS 
SELECT * FROM personal p
INNER JOIN `courses` c
ON p.`courses` = c.`course_id`

bad ma hum view ko alter ya drop bhe kar sakte hai
-----------for showing view result
SELECT * FROM studentdata

----------------alter view
ALTER VIEW studentdata
AS 
SELECT p.id, p.name, ci.cityname, cs.course_name
FROM personal p
INNER JOIN city ci
ON p.city = ci.cid
INNER JOIN courses cs
ON p.courses = cs.course_id

-----also use for alter 
CREATE OR REPLACE VIEW studentdata
AS 
SELECT p.id, p.name, ci.cityname, cs.course_name
FROM personal p
INNER JOIN city ci
ON p.city = ci.cid
INNER JOIN courses cs
ON p.courses = cs.course_id

-----rename view
RENAME TABLE studentdata 
TO personaldata

SELECT * FROM personaldata
------------------for deleting view
DROP VIEW personaldata

-----important point related view
view ka name table ki name se match nhi hnna chahya



-------------------------index in mysql-----------------
bht sara data hn to hum indexing karte hai columns p aise take data jaldi fetch hn
CREATE INDEX index_name ON personal (NAME)

index as liya banate hai take searching ko fast kar sakte

---index kitne lage hai uski liya command hai
SHOW INDEX FROM personal

-------------drop index
DROP INDEX index_name ON personal



























